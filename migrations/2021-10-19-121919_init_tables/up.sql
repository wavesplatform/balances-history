CREATE TYPE blocks_microblocks_block_type as ENUM ('block', 'microblock', 'rollback', 'EMPTY');

CREATE TABLE IF NOT EXISTS blocks_microblocks (
	uid BIGINT GENERATED BY DEFAULT AS IDENTITY,
	id TEXT NOT NULL,
	height INTEGER NOT NULL,
	time_stamp BIGINT NOT NULL,
    is_solidified bool not null default false,
    microblock_id TEXT,
    block_type blocks_microblocks_block_type NOT NULL,
    CONSTRAINT blocks_microblocks_uid_pkey PRIMARY KEY(uid) INCLUDE(height)
);

CREATE INDEX IF NOT EXISTS blocks_microblocks_id_idx ON blocks_microblocks (id);
CREATE INDEX IF NOT EXISTS blocks_microblocks_time_stamp_uid_idx ON blocks_microblocks (time_stamp DESC, uid DESC);
CREATE INDEX IF NOT EXISTS blocks_microblocks_is_solidified_idx ON blocks_microblocks(is_solidified) where is_solidified = false;
CREATE INDEX IF NOT EXISTS block_microblocks_timestamp_uid ON blocks_microblocks (to_timestamp(time_stamp/1000) desc, uid desc);
CREATE INDEX IF NOT EXISTS block_microblocks_uid_height ON blocks_microblocks (uid desc, height);

CREATE TABLE safe_heights (
    uid BIGINT GENERATED BY DEFAULT AS IDENTITY CONSTRAINT safe_heights_uid_pkey PRIMARY KEY,
    table_name TEXT,
    height INTEGER NOT NULL
);

CREATE UNIQUE INDEX "safe_heights_table_name_uix" ON safe_heights(table_name);

create table balance_history (
    uid BIGINT GENERATED BY DEFAULT AS IDENTITY CONSTRAINT balance_history_uid_pkey PRIMARY KEY,
    block_uid BIGINT NOT NULL CONSTRAINT balance_history_block_uid_fkey REFERENCES blocks_microblocks (uid) ON DELETE CASCADE,
    address_id  BIGINT NOT NULL,
    asset_id BIGINT NOT NULL,
    amount numeric(100)
);

CREATE INDEX IF NOT EXISTS bh_address_asset_block_uid on balance_history(address_id, asset_id, block_uid desc);
CREATE INDEX IF NOT EXISTS bh_block_uid on balance_history(block_uid);

CREATE TABLE blocks_rollbacks (
	uid BIGINT GENERATED BY DEFAULT AS IDENTITY CONSTRAINT blocks_rollbacks_pkey PRIMARY KEY,
    max_uid BIGINT, 
    id TEXT NOT NULL, 
    max_height INTEGER, 
    max_time_stamp BIGINT, 
    deleted_blocks_data TEXT
);

CREATE TABLE unique_assets (
    uid BIGINT GENERATED BY DEFAULT AS IDENTITY ,
    asset_id TEXT NOT NULL CONSTRAINT unique_assets_pk PRIMARY KEY
);
CREATE UNIQUE INDEX "unique_assets_uid_uqix" on unique_assets(uid);
INSERT INTO unique_assets(asset_id) values('WAVES');

CREATE TABLE unique_address (
    uid BIGINT GENERATED BY DEFAULT AS IDENTITY ,
    address TEXT NOT NULL CONSTRAINT unique_address_pk PRIMARY KEY
);
CREATE UNIQUE INDEX "unique_address_uid_uqix" on unique_address(uid);

CREATE TYPE enum_task_state_ad as ENUM ('new', 'progress', 'error', 'done');

CREATE TABLE asset_distribution_tasks(
    uid BIGINT GENERATED BY DEFAULT AS IDENTITY CONSTRAINT asset_distribution_tasks_pk PRIMARY KEY,
    asset_id TEXT NOT NULL,
    height INT,
    task_state enum_task_state_ad DEFAULT 'new'::enum_task_state_ad,
    state_updated TIMESTAMP NOT NULL DEFAULT now()::TIMESTAMP WITHOUT TIME ZONE,
    error_message TEXT
);

CREATE UNIQUE INDEX "ad_tasks_asset_height_ukey" ON asset_distribution_tasks(asset_id, height);

create schema asset_distributions;
grant USAGE on SCHEMA asset_distributions to reader;
grant select on all tables in schema asset_distributions to reader;
